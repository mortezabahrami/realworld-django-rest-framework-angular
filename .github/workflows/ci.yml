name: production

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  ci:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]
        node: [20]
    env:
      NODE_ENV: "production"


    steps:
      - name: Checkout ðŸ›Ž
        uses: actions/checkout@master

      - name: Setup node env
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      #- name: Cache node_modules
      #  uses: actions/cache@v2
      #  with:
      #    path: ~/.npm
      #    key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      #    restore-keys: |
      #      ${{ runner.os }}-node-

      - name: Install Angular CLI
        run: npm install -g @angular/cli && npm install @angular-devkit/build-angular --force
            
      - name: Installing NPM
        working-directory: ./frontend
        run: npm install --force

      - name: Install Devkit
        run: npm install karma karma-chrome-launcher karma-coverage karma-jasmine karma-jasmine-html-reporter @types/node --save-dev --force
      #- name: Install Jest
      #  run: npm i --save-dev @types/jest @types/node

      - name: Run Tests
        working-directory: ./frontend
        run: npm run test

      - name: Building application
        working-directory: ./frontend
        run: npm run build

      - name: Generate deployment package
        run: zip -r deploy.zip * .[^.]* -x "**node_modules**"

      - name: Get timestamp
        uses: gerred/actions/current-time@master
        id: current-time

      - name: Run string replace
        uses: frabert/replace-string-action@master
        id: format-time
        with:
          pattern: '[:\.]+'
          string: "${{ steps.current-time.outputs.time }}"
          replace-with: '-'
          flags: 'g'

      - name: Beanstalk Deploy for app
        uses: einaregilsson/beanstalk-deploy@v22
        env:
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
        with:
          aws_access_key: ${{secrets.ACCESS_KEY_ID}}
          aws_secret_key: ${{secrets.SECRET_ACCESS_KEY}}
          application_name: congnition-ai-app
          environment_name: Congnition-ai-app-env-1
          region: eu-central-1
          version_label: "e-learn-${{ steps.format-time.outputs.replaced }}"
          deployment_package: deploy.zip

      - name: Deployed!
        run: echo App deployed to ELB
